{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\n// Adapted from https://github.com/then/is-promise/blob/master/index.js\n// Distributed under MIT License https://github.com/then/is-promise/blob/master/LICENSE\nfunction is_promise(value) {\n    return !!value && (typeof value === 'object' || typeof value === 'function') && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\nfunction split_css_unit(value) {\n    const split = typeof value === 'string' && value.match(/^\\s*(-?[\\d.]+)([^\\s]*)\\s*$/);\n    return split ? [parseFloat(split[1]), split[2] || 'px'] : [value, 'px'];\n}\nconst contenteditable_truthy_values = ['', true, 1, 'true', 'contenteditable'];\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\n/**\n * Resize observer singleton.\n * One listener per element only!\n * https://groups.google.com/a/chromium.org/g/blink-dev/c/z6ienONUb5A/m/F5-VcUZtBAAJ\n */\nclass ResizeObserverSingleton {\n    constructor(options) {\n        this.options = options;\n        this._listeners = 'WeakMap' in globals ? new WeakMap() : undefined;\n    }\n    observe(element, listener) {\n        this._listeners.set(element, listener);\n        this._getObserver().observe(element, this.options);\n        return () => {\n            this._listeners.delete(element);\n            this._observer.unobserve(element); // this line can probably be removed\n        };\n    }\n    _getObserver() {\n        var _a;\n        return (_a = this._observer) !== null && _a !== void 0 ? _a : (this._observer = new ResizeObserver((entries) => {\n            var _a;\n            for (const entry of entries) {\n                ResizeObserverSingleton.entries.set(entry.target, entry);\n                (_a = this._listeners.get(entry.target)) === null || _a === void 0 ? void 0 : _a(entry);\n            }\n        }));\n    }\n}\n// Needs to be written like this to pass the tree-shake-test\nResizeObserverSingleton.entries = 'WeakMap' in globals ? new WeakMap() : undefined;\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n    return style.sheet;\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentNode !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    if (node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction comment(content) {\n    return document.createComment(content);\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_immediate_propagation(fn) {\n    return function (event) {\n        event.stopImmediatePropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\n/**\n * List of attributes that should always be set through the attr method,\n * because updating them through the property setter doesn't work reliably.\n * In the example of `width`/`height`, the problem is that the setter only\n * accepts numeric values, but the attribute can also be set to a string like `50%`.\n * If this list becomes too big, rethink this approach.\n */\nconst always_set_through_set_attribute = ['width', 'height'];\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set && always_set_through_set_attribute.indexOf(key) === -1) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data_map(node, data_map) {\n    Object.keys(data_map).forEach((key) => {\n        set_custom_element_data(node, key, data_map[key]);\n    });\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction set_dynamic_element_data(tag) {\n    return (/-/.test(tag)) ? set_custom_element_data_map : set_attributes;\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction init_binding_group(group) {\n    let _inputs;\n    return {\n        /* push */ p(...inputs) {\n            _inputs = inputs;\n            _inputs.forEach(input => group.push(input));\n        },\n        /* remove */ r() {\n            _inputs.forEach(input => group.splice(group.indexOf(input), 1));\n        }\n    };\n}\nfunction init_binding_group_dynamic(group, indexes) {\n    let _group = get_binding_group(group);\n    let _inputs;\n    function get_binding_group(group) {\n        for (let i = 0; i < indexes.length; i++) {\n            group = group[indexes[i]] = group[indexes[i]] || [];\n        }\n        return group;\n    }\n    function push() {\n        _inputs.forEach(input => _group.push(input));\n    }\n    function remove() {\n        _inputs.forEach(input => _group.splice(_group.indexOf(input), 1));\n    }\n    return {\n        /* update */ u(new_indexes) {\n            indexes = new_indexes;\n            const new_group = get_binding_group(group);\n            if (new_group !== _group) {\n                remove();\n                _group = new_group;\n                push();\n            }\n        },\n        /* push */ p(...inputs) {\n            _inputs = inputs;\n            push();\n        },\n        /* remove */ r: remove\n    };\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction claim_comment(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 8, (node) => {\n        node.data = '' + data;\n        return undefined;\n    }, () => comment(data), true);\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes, is_svg) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration(undefined, is_svg);\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes, is_svg);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    text.data = data;\n}\nfunction set_data_contenteditable(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    text.data = data;\n}\nfunction set_data_maybe_contenteditable(text, data, attr_value) {\n    if (~contenteditable_truthy_values.indexOf(attr_value)) {\n        set_data_contenteditable(text, data);\n    }\n    else {\n        set_data(text, data);\n    }\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value == null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value, mounting) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    if (!mounting || value !== undefined) {\n        select.selectedIndex = -1; // no option should be selected\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked');\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_iframe_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n            // make sure an initial resize event is fired _after_ the iframe is loaded (which is asynchronous)\n            // see https://github.com/sveltejs/svelte/issues/4233\n            fn();\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nconst resize_observer_content_box = /* @__PURE__ */ new ResizeObserverSingleton({ box: 'content-box' });\nconst resize_observer_border_box = /* @__PURE__ */ new ResizeObserverSingleton({ box: 'border-box' });\nconst resize_observer_device_pixel_content_box = /* @__PURE__ */ new ResizeObserverSingleton({ box: 'device-pixel-content-box' });\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, cancelable, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nfunction head_selector(nodeId, head) {\n    const result = [];\n    let started = 0;\n    for (const node of head.childNodes) {\n        if (node.nodeType === 8 /* comment node */) {\n            const comment = node.textContent.trim();\n            if (comment === `HEAD_${nodeId}_END`) {\n                started -= 1;\n                result.push(node);\n            }\n            else if (comment === `HEAD_${nodeId}_START`) {\n                started += 1;\n                result.push(node);\n            }\n        }\n        else if (started > 0) {\n            result.push(node);\n        }\n    }\n    return result;\n}\nclass HtmlTag {\n    constructor(is_svg = false) {\n        this.is_svg = false;\n        this.is_svg = is_svg;\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            if (this.is_svg)\n                this.e = svg_element(target.nodeName);\n            /** #7364  target for <template> may be provided as #document-fragment(11) */\n            else\n                this.e = element((target.nodeType === 11 ? 'TEMPLATE' : target.nodeName));\n            this.t = target.tagName !== 'TEMPLATE' ? target : target.content;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.nodeName === 'TEMPLATE' ? this.e.content.childNodes : this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes, is_svg = false) {\n        super(is_svg);\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\nfunction construct_svelte_component(component, props) {\n    return new component(props);\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { ownerNode } = info.stylesheet;\n            // there is no ownerNode if it runs on jsdom.\n            if (ownerNode)\n                detach(ownerNode);\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\n/**\n * Schedules a callback to run immediately before the component is updated after any state change.\n *\n * The first time the callback runs will be before the initial `onMount`\n *\n * https://svelte.dev/docs#run-time-svelte-beforeupdate\n */\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\n/**\n * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.\n * It must be called during the component's initialisation (but doesn't need to live *inside* the component;\n * it can be called from an external module).\n *\n * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).\n *\n * https://svelte.dev/docs#run-time-svelte-onmount\n */\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\n/**\n * Schedules a callback to run immediately after the component has been updated.\n *\n * The first time the callback runs will be after the initial `onMount`\n */\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\n/**\n * Schedules a callback to run immediately before the component is unmounted.\n *\n * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the\n * only one that runs inside a server-side component.\n *\n * https://svelte.dev/docs#run-time-svelte-ondestroy\n */\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\n/**\n * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).\n * Event dispatchers are functions that can take two arguments: `name` and `detail`.\n *\n * Component events created with `createEventDispatcher` create a\n * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).\n * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).\n * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)\n * property and can contain any type of data.\n *\n * https://svelte.dev/docs#run-time-svelte-createeventdispatcher\n */\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail, { cancelable = false } = {}) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail, { cancelable });\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n            return !event.defaultPrevented;\n        }\n        return true;\n    };\n}\n/**\n * Associates an arbitrary `context` object with the current component and the specified `key`\n * and returns that object. The context is then available to children of the component\n * (including slotted content) with `getContext`.\n *\n * Like lifecycle functions, this must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-setcontext\n */\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n    return context;\n}\n/**\n * Retrieves the context that belongs to the closest parent component with the specified `key`.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-getcontext\n */\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n/**\n * Retrieves the whole context map that belongs to the closest parent component.\n * Must be called during component initialisation. Useful, for example, if you\n * programmatically create a component and want to pass the existing context to it.\n *\n * https://svelte.dev/docs#run-time-svelte-getallcontexts\n */\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\n/**\n * Checks whether a given `key` has been set in the context of a parent component.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-hascontext\n */\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nlet render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = /* @__PURE__ */ Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    // Do not reenter flush while dirty components are updated, as this can\n    // result in an infinite loop. Instead, let the inner flush handle it.\n    // Reentrancy is ok afterwards for bindings etc.\n    if (flushidx !== 0) {\n        return;\n    }\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        try {\n            while (flushidx < dirty_components.length) {\n                const component = dirty_components[flushidx];\n                flushidx++;\n                set_current_component(component);\n                update(component.$$);\n            }\n        }\n        catch (e) {\n            // reset dirty state to not end up in a deadlocked state and then rethrow\n            dirty_components.length = 0;\n            flushidx = 0;\n            throw e;\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n/**\n * Useful for example to execute remaining `afterUpdate` callbacks before executing `destroy`.\n */\nfunction flush_render_callbacks(fns) {\n    const filtered = [];\n    const targets = [];\n    render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));\n    targets.forEach((c) => c());\n    render_callbacks = filtered;\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n    else if (callback) {\n        callback();\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    const options = { direction: 'in' };\n    let config = fn(node, params, options);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config(options);\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    const options = { direction: 'out' };\n    let config = fn(node, params, options);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config(options);\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    const options = { direction: 'both' };\n    let config = fn(node, params, options);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config(options);\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    const updates = [];\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            // defer updates until all the DOM shuffling is done\n            updates.push(() => block.p(child_ctx, dirty));\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    run_all(updates);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\nconst _boolean_attributes = [\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'inert',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n];\n/**\n * List of HTML boolean attributes (e.g. `<input disabled>`).\n * Source: https://html.spec.whatwg.org/multipage/indices.html\n */\nconst boolean_attributes = new Set([..._boolean_attributes]);\n\n/** regex of all html void element names */\nconst void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\nfunction is_void(name) {\n    return void_element_names.test(name) || name.toLowerCase() === '!doctype';\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst ATTR_REGEX = /[&\"]/g;\nconst CONTENT_REGEX = /[&<]/g;\n/**\n * Note: this method is performance sensitive and has been optimized\n * https://github.com/sveltejs/svelte/pull/5701\n */\nfunction escape(value, is_attr = false) {\n    const str = String(value);\n    const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;\n    pattern.lastIndex = 0;\n    let escaped = '';\n    let last = 0;\n    while (pattern.test(str)) {\n        const i = pattern.lastIndex - 1;\n        const ch = str[i];\n        escaped += str.substring(last, i) + (ch === '&' ? '&amp;' : (ch === '\"' ? '&quot;' : '&lt;'));\n        last = i + 1;\n    }\n    return escaped + str.substring(last);\n}\nfunction escape_attribute_value(value) {\n    // keep booleans, null, and undefined for the sake of `spread`\n    const should_escape = typeof value === 'string' || (value && typeof value === 'object');\n    return should_escape ? escape(value, true) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules. Otherwise you may need to fix a <${name}>.`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape(value, true)}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${escape_attribute_value(style_object[key])};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);\n            // if the component was destroyed immediately\n            // it will update the `$$.on_destroy` reference to `null`.\n            // the destructured on_destroy may still reference to the old array\n            if (component.$$.on_destroy) {\n                component.$$.on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        flush_render_callbacks($$.after_update);\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: [],\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            if (!is_function(callback)) {\n                return noop;\n            }\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        if (!is_function(callback)) {\n            return noop;\n        }\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.59.2' }, detail), { bubbles: true }));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation, has_stop_immediate_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    if (has_stop_immediate_propagation)\n        modifiers.push('stopImmediatePropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction set_data_contenteditable_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction set_data_maybe_contenteditable_dev(text, data, attr_value) {\n    if (~contenteditable_truthy_values.indexOf(attr_value)) {\n        set_data_contenteditable_dev(text, data);\n    }\n    else {\n        set_data_dev(text, data);\n    }\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nfunction validate_dynamic_element(tag) {\n    const is_string = typeof tag === 'string';\n    if (tag && !is_string) {\n        throw new Error('<svelte:element> expects \"this\" attribute to be a string.');\n    }\n}\nfunction validate_void_dynamic_element(tag) {\n    if (tag && is_void(tag)) {\n        console.warn(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\n    }\n}\nfunction construct_svelte_component_dev(component, props) {\n    const error_message = 'this={...} of <svelte:component> should specify a Svelte component.';\n    try {\n        const instance = new component(props);\n        if (!instance.$$ || !instance.$set || !instance.$on || !instance.$destroy) {\n            throw new Error(error_message);\n        }\n        return instance;\n    }\n    catch (err) {\n        const { message } = err;\n        if (typeof message === 'string' && message.indexOf('is not a constructor') !== -1) {\n            throw new Error(error_message);\n        }\n        else {\n            throw err;\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, ResizeObserverSingleton, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_iframe_resize_listener, add_location, add_render_callback, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_comment, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, comment, component_subscribe, compute_rest_props, compute_slots, construct_svelte_component, construct_svelte_component_dev, contenteditable_truthy_values, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, flush_render_callbacks, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, head_selector, identity, init, init_binding_group, init_binding_group_dynamic, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, is_void, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, resize_observer_border_box, resize_observer_content_box, resize_observer_device_pixel_content_box, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_custom_element_data_map, set_data, set_data_contenteditable, set_data_contenteditable_dev, set_data_dev, set_data_maybe_contenteditable, set_data_maybe_contenteditable_dev, set_dynamic_element_data, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, split_css_unit, spread, src_url_equal, start_hydrating, stop_immediate_propagation, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_dynamic_element, validate_each_argument, validate_each_keys, validate_slots, validate_store, validate_void_dynamic_element, xlink_attr };\n","<script>\nconst IN_APP = true;\n// const IN_APP = false;\n// server.jsとOne.svelteのvalidationをやる\nlet ID = 0;\nlet DESCRIPTION = 'description text';\nlet LIST = [\n\t{ id: 1, text: \"abc\", add_date: ((new Date()).toISOString()), update_date: ((new Date()).toISOString()), check_on_off: false, check_date: ((new Date()).toISOString()) },\n\t{ id: 2, text: \"def\", add_date: ((new Date()).toISOString()), update_date: ((new Date()).toISOString()), check_on_off: false, check_date: ((new Date()).toISOString()) },\n];\nlet IS_EDITING_DESCRIPTION = false;\nlet SELECTED_ITEM_ID = null;\nconst all_list_fn = () => {\n\tlet A_OR_D = \"asc\";\n\t// checkboxのON/OFFでcheck_dateを更新する関数(check_on_offのtrue/falseを切り替え、check_dateを更新する)\n\tlet check_date_update = (Id_To_Check) => LIST = LIST.map(item => item.id === Id_To_Check ? {...item, check_on_off: !item.check_on_off, check_date: (new Date()).toISOString()} : item);\n\tconst change_sort = () => A_OR_D = A_OR_D === \"asc\" ? \"desc\" : \"asc\";\n\tconst sort_by_id = () => (change_sort(), LIST = LIST.sort((a, b) => A_OR_D === \"asc\" ? a.id - b.id : b.id - a.id));\n\tconst sort_by_text = () => (change_sort(), LIST = LIST.sort((a, b) => A_OR_D === \"asc\" ? a.text.localeCompare(b.text) : b.text.localeCompare(a.text)));\n\tconst sort_by_add_date = () => (change_sort(), LIST = LIST.sort((a, b) => A_OR_D === \"asc\" ? a.add_date.localeCompare(b.add_date) : b.add_date.localeCompare(a.add_date)));\n\tconst sort_by_update_date = () => (change_sort(), LIST = LIST.sort((a, b) => A_OR_D === \"asc\" ? a.update_date.localeCompare(b.update_date) : b.update_date.localeCompare(a.update_date)));\n\tconst sort_by_check_date = () => (change_sort(), LIST = LIST.sort((a, b) => A_OR_D === \"asc\" ? a.check_date.localeCompare(b.check_date) : b.check_date.localeCompare(a.check_date)));\n\n\tconst id_init = () => ID = 0;\n\tconst description_init = () => DESCRIPTION = \"\";\n\tconst list_init = () => LIST = [{ id: 0, text: \"\", add_date: ((new Date()).toISOString()), update_date: ((new Date()).toISOString()), check_on_off: false, check_date: ((new Date()).toISOString()) }];\n\tconst make_new_blank_list = () => (id_init(), description_init(), list_init());\n\t\n\tconst make_new_id = () => LIST.length > 0 ? LIST[LIST.length - 1].id + 1 : 1;\n\tconst add_list = (Text=\"abc\", Add_Date=((new Date()).toISOString()), Update_Date=((new Date()).toISOString()), Check_Date=((new Date()).toISOString()),) => LIST = [...LIST, { id: make_new_id(), text: Text, add_date: Add_Date, update_date: Update_Date, check_on_off: false, check_date: Check_Date }];\n\tconst remove_list = (Id_To_Remove) => LIST = LIST.filter(item => item.id !== Id_To_Remove);\n\tconst edit_list = (Id_To_Edit, event) => LIST = LIST.map(item => item.id === Id_To_Edit ? {...item, text: event.target.value, update_date: (new Date()).toISOString()} : item);\n\tlet toggle_details = (Item_Id) => SELECTED_ITEM_ID = SELECTED_ITEM_ID === Item_Id ? null : Item_Id;\n\tlet toggle_EDITING_DESCRIPTION = () => IS_EDITING_DESCRIPTION = !IS_EDITING_DESCRIPTION;\n\tconst edit_description = (event) => DESCRIPTION = event.target.value;\n\treturn {\n\t\tcheck_date_update,\n\t\tsort_by_id,\n\t\tsort_by_text,\n\t\tsort_by_add_date,\n\t\tsort_by_update_date,\n\t\tsort_by_check_date,\n\t\tmake_new_blank_list,\n\t\tadd_list,\n\t\tremove_list,\n\t\tedit_list,\n\t\ttoggle_details,\n\t\ttoggle_EDITING_DESCRIPTION,\n\t\tedit_description,\n\t};\n};\nconst {\n\t\tsort_by_id,\n\t\tsort_by_text,\n\t\tsort_by_add_date,\n\t\tsort_by_update_date,\n\t\tsort_by_check_date,\n\t\tmake_new_blank_list,\n\t\tadd_list,\n\t\tremove_list,\n\t\tedit_list,\n\t\tedit_description,\n} = all_list_fn();\nlet {\n\tcheck_date_update,\n\ttoggle_EDITING_DESCRIPTION,\n\ttoggle_details,\n} = all_list_fn();\nconst overwrite_fn_for_web = () => {\n\tcheck_date_update = async (Id_To_Check) => {\n\t\tLIST = LIST.map(item => item.id === Id_To_Check ? {...item, check_on_off: !item.check_on_off, check_date: (new Date()).toISOString()} : item);\n\t\tawait fetch_insert_or_update_link(ID);\n\t}\n\ttoggle_EDITING_DESCRIPTION = async () => {\n\t\tIS_EDITING_DESCRIPTION = !IS_EDITING_DESCRIPTION;\n\t\tawait fetch_insert_or_update_link(ID);\n\t}\n\ttoggle_details = async (Item_Id) => {\n\t\tSELECTED_ITEM_ID = SELECTED_ITEM_ID === Item_Id ? null : Item_Id;\n\t\tawait fetch_insert_or_update_link(ID);\n\t}\n};\nIN_APP ? overwrite_fn_for_web() : null;\n\n\nconst pre_upload_for_make_json_str = () => {\n\tconst DATA = {desc: DESCRIPTION, list: LIST,};\n\tconst DATA_JSON_STR = JSON.stringify({\n\t\tDATA\n\t});\n\treturn DATA_JSON_STR;\n};\nconst pre_download_for_parse_json_str = (Id, Data_Json_Str) => {\n\tconst parsed_Data_Json_Str = JSON.parse(Data_Json_Str);\n\tconst DATA = parsed_Data_Json_Str['DATA'];\n\tID = Id;\n\tDESCRIPTION = DATA['desc'];\n\tLIST = DATA['list'];\n};\n// let DESCRIPTION = '';\n// let LIST = [];\nlet ERROR_OF_COMMENT_REPLY = '';\nlet ERROR_OF_COMMENT = '';\nlet ERROR_OF_NAME = '';\nlet ERROR_OF_PASSWORD = '';\nlet ERROR_OF_TAG = '';\nlet HELLO_FETCH_DATA = [];\nlet DATA_ID_FROM_ONLINE = null;\n// let DEV_MODE = true;\nlet DEV_MODE = false;\nlet EDIT_MODE = false;\nlet NEW_TEXT = 'text';\nlet NEW_LINK = 'https://google.com';\nlet IS_CALENDAR_VISIBLE = true;\nlet IS_SHOW_LEFT = true;\nlet IS_SHOW_RIGHT = true;\nconst toggle_left_or_right_side = () => {\n\t// IS_SHOW_LEFTとIS_SHOW_RIGHTが両方true、どちらかだけがtrue、3つの状態がある\n\t     if (IS_SHOW_LEFT && IS_SHOW_RIGHT){[IS_SHOW_LEFT, IS_SHOW_RIGHT] = [true, false];}\n\telse if (IS_SHOW_LEFT && !IS_SHOW_RIGHT){[IS_SHOW_LEFT, IS_SHOW_RIGHT] = [false, true];}\n\telse if (!IS_SHOW_LEFT && IS_SHOW_RIGHT){[IS_SHOW_LEFT, IS_SHOW_RIGHT] = [true, true];}\n};\nconst in_chrome_dev_tool = () => {\n\t// const obj = await app.$$.ctx;\n\t// const keys = Object.keys(obj);  // [\"a\", \"b\", \"c\"] // キーの配列を取得\n\t// const values = Object.values(obj);  // [1, 2, 3] // 値の配列を取得\n\t// const entries = Object.entries(obj);  // [[\"a\", 1], [\"b\", 2], [\"c\", 3]] // キーと値のペアの配列を取得\n\t// await entries.filter(V=>typeof V[1] === 'function').filter(V=>V[1].name === 'test_db_init_only_set_name_password_test_mode')[0][1]();\n};\nconst all_validation_fn = () => {\n\tfunction error_check_name(name) {\n\t\tconst validate_name_switch = (Name) => {\n\t\t\tswitch (true) {\n\t\t\t\tcase Name === '':\n\t\t\t\tcase Name === undefined:\n\t\t\t\tcase Name === null:\n\t\t\t\t\tthrow new Error('ユーザー名が未入力です');\n\t\t\t\tcase Name.length > 36:\n\t\t\t\t\tthrow new Error('ユーザー名は36文字以下で入力してください');\n\t\t\t\tcase Name.length < 4:\n\t\t\t\t\tthrow new Error('ユーザー名は4文字以上で入力してください');\n\t\t\t\tcase Name.includes(' '):\n\t\t\t\tcase Name.includes('　'):\n\t\t\t\t\tthrow new Error('ユーザー名に空白文字が含まれています');\n\t\t\t\tdefault:\n\t\t\t\t\treturn \"OK\";\n\t\t\t}\n\t\t}\n\t\ttry {return validate_name_switch(name);\t}\n\t\tcatch (error) {return error.message;}\n\t}\n\tfunction error_check_password(password) {\n\t\tconst validate_password_switch = (Password) => {\n\t\t\tswitch (true) {\n\t\t\t\tcase Password === '':\n\t\t\t\tcase Password === undefined:\n\t\t\t\tcase Password === null:\n\t\t\t\t\tthrow new Error('パスワードが未入力です');\n\t\t\t\tcase Password.length > 36:\n\t\t\t\t\tthrow new Error('パスワードは36文字以下で入力してください');\n\t\t\t\tcase Password.length < 4:\n\t\t\t\t\tthrow new Error('パスワードは4文字以上で入力してください');\n\t\t\t\tcase Password.includes(' '):\n\t\t\t\tcase Password.includes('　'):\n\t\t\t\t\tthrow new Error('パスワードに空白文字が含まれています');\n\t\t\t\tdefault:\n\t\t\t\t\treturn \"OK\";\n\t\t\t}\n\t\t}\n\t\ttry {return validate_password_switch(password);\n\t\t} catch (error) {return error.message;}\n\t}\n\n\tconst error_check_insert_tag = (tag) => {\n\t\tconst reserved_words = ['SELECT', 'FROM', 'WHERE', 'INSERT', 'DELETE', 'UPDATE', 'DROP', 'ALTER', 'CREATE', 'TABLE', 'INTO', 'VALUES', 'AND', 'OR', 'NOT', 'NULL', 'TRUE', 'FALSE'];\n\t\t// 空白を含むかチェックする1行の関数。大文字の空白もチェックする。含まれていたらtrueを返す\n\t\tconst checkForSpaces = (tag) => [' ', '　'].some((space) => tag.includes(space));\n\t\t// 記号が含まれているかチェックする1行の関数。含まれていたらtrueを返す\n\t\tconst checkForSymbols = (tag) => {\n\t\t\tconst symbols = ['-', '#', '!', '$', '@', '%', '^', '&', '*', '(', ')', '_', '+', '|', '~', '=', '`', '{', '}', '[', ']', ':', '\"', ';', '\\'', '<', '>', '?', ',', '.', '/'];\n\t\t\treturn symbols.some((symbol) => tag.includes(symbol));\n\t\t};\n\t\tswitch (true) {\n\t\t\tcase tag === undefined: return 'tagが空です'; break;\n\t\t\tcase checkForSpaces(tag): return '空白を含む場合はエラー'; break;\n\t\t\tcase checkForSymbols(tag): return '記号を含む場合はエラー'; break;\n\t\t\tcase tag.length === 0: return '0文字はエラー'; break;\n\t\t\tcase tag.length > 7: return '7文字以上はエラー'; break;\n\t\t\tcase reserved_words.includes(tag): return 'SQLの予約語を含む場合はエラー'; break;\n\t\t\tdefault: return 'OK'; break;\n\t\t}\n\t};\n\n        const error_check_insert_comment = (comment, DATA_LIMIT=1000) => {\n\n            const reserved_words = ['SELECT', 'FROM', 'WHERE', 'INSERT', 'DELETE', 'UPDATE', 'DROP', 'ALTER', 'CREATE', 'TABLE', 'INTO', 'VALUES', 'AND', 'OR', 'NOT', 'NULL', 'TRUE', 'FALSE'];\n            const checkForSpaces = (comment) => [' ', '　'].some((space) => comment.includes(space));\n            // 記号が含まれているかチェックする1行の関数。含まれていたらtrueを返す\n            const checkForSymbols = (comment) => {\n                const symbols = ['-', '#', '!', '$', '@', '%', '^', '&', '*', '(', ')', '_', '+', '|', '~', '=', '`', '{', '}', '[', ']', ':', '\"', ';', '\\'', '<', '>', '?', ',', '.', '/'];\n                return symbols.some((symbol) => comment.includes(symbol));\n            };\n            switch (true) {\n                case comment === undefined: return 'commentが空の場合はエラー'; break;\n                case comment.length > DATA_LIMIT: return 'commentの文字数がdata_limitを超える場合はエラー'; break;\n                case comment.length === 0: return '0文字の場合はエラー'; break;\n                case checkForSpaces(comment): return '空白を含む場合はエラー'; break;\n                case checkForSymbols(comment): return '記号を含む場合はエラー'; break;\n                case comment.length > 300: return '300文字以上はエラー'; break;\n                case reserved_words.includes(comment): return 'SQLの予約語を含む場合はエラー'; break;\n                default: return 'OK'; break;\n            }\n        }\n        const error_check_insert_comment_reply = (comment_reply, DATA_LIMIT) => {\n\n            const reserved_words = ['SELECT', 'FROM', 'WHERE', 'INSERT', 'DELETE', 'UPDATE', 'DROP', 'ALTER', 'CREATE', 'TABLE', 'INTO', 'VALUES', 'AND', 'OR', 'NOT', 'NULL', 'TRUE', 'FALSE'];\n            const checkForSpaces = (tag) => [' ', '　'].some((space) => tag.includes(space));\n            // 記号が含まれているかチェックする1行の関数。含まれていたらtrueを返す\n            const checkForSymbols = (comment_reply) => {\n                const symbols = ['-', '#', '!', '$', '@', '%', '^', '&', '*', '(', ')', '_', '+', '|', '~', '=', '`', '{', '}', '[', ']', ':', '\"', ';', '\\'', '<', '>', '?', ',', '.', '/'];\n                return symbols.some((symbol) => comment_reply.includes(symbol));\n            };\n            switch (true) {\n                case comment_reply === undefined: return 'comment_replyが空の場合はエラー'; break;\n                case comment_reply.length > DATA_LIMIT: return 'comment_replyの文字数がdata_limitを超える場合はエラー'; break;\n                case comment_reply.length === 0: return '0文字の場合はエラー'; break;\n                case checkForSpaces(comment_reply): return '空白を含む場合はエラー'; break;\n                case checkForSymbols(comment_reply): return '記号を含む場合はエラー'; break;\n                case comment_reply.length > 10: return '10文字以上はエラー'; break;\n                case reserved_words.includes(comment_reply): return 'SQLの予約語を含む場合はエラー'; break;\n                default: return 'OK'; break;\n            }\n        }\n        const error_check_insert_link = (link) => {\n            const WHITE_LIST_URL_ARRAY = [\n                'https://yanaka.dev/',\n                'https://www.yahoo.co.jp/',\n                'https://www.google.co.jp/',\n                'https://www.youtube.com/',\n            ];\n            const reserved_words = ['SELECT', 'FROM', 'WHERE', 'INSERT', 'DELETE', 'UPDATE', 'DROP', 'ALTER', 'CREATE', 'TABLE', 'INTO', 'VALUES', 'AND', 'OR', 'NOT', 'NULL', 'TRUE', 'FALSE'];\n            const is_url = (url) => (/^(https?):\\/\\/[^\\s/$.?#].[^\\s]*$/i).test(url);\n            const is_include_WHITE_LIST_URL = (target_url_str) => WHITE_LIST_URL_ARRAY.some((WHITE_LIST_URL) => target_url_str.startsWith(WHITE_LIST_URL));\n\n            !is_url(link) ? console.log('URLの形式が正しくありません') : null;\n\n            switch (true) {\n                case link === undefined: return 'linkが空です'; break;\n                case reserved_words.includes(link): return 'SQLの予約語を含む場合はエラー'; break;\n                case link.length > 2000: return 'URLが長すぎます'; break;\n                case !is_url(link): return 'URLの形式が正しくありません'; break;\n                case !is_include_WHITE_LIST_URL(link): return '許可されていないURLです'; break;\n                default: return 'OK'; break;\n            }\n        };\n\n        const error_check_insert_data = (data_json_str) => {\n            switch (true) {\n                case data_json_str === undefined: return 'dataが空です'; break;\n                case data_json_str.length > 10000: return 'dataが長すぎます'; break;\n                default: return 'OK'; break;\n            }\n        };\n        // all_validation_checking_client_server_bothにそれぞれの関数を入れる\n        const all_validation_checking_client_server_both = {\n            'validation_insert_tag': error_check_insert_tag,\n            'validation_insert_comment': error_check_insert_comment,\n            'validation_insert_comment_reply': error_check_insert_comment_reply,\n            'validation_insert_link': error_check_insert_link,\n            'validation_insert_data': error_check_insert_data,\n        };\n        // 以下のように利用する\n        // all_validation_checking_client_server_both['validation_insert_tag']('test', 10);\n////////////////////////////////////////////////// ---------validation--------- /////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\treturn {\n\t\terror_check_name,\n\t\terror_check_password,\n\t\terror_check_insert_tag,\n\t\terror_check_insert_comment,\n\t\terror_check_insert_comment_reply,\n\t\terror_check_insert_link,\n\t\terror_check_insert_data,\n\t};\n};\nconst {error_check_name,error_check_password, error_check_insert_tag,error_check_insert_comment,error_check_insert_comment_reply,error_check_insert_link,error_check_insert_data,} = all_validation_fn();\nconst all_web_prop_fn = () => {\n\t// $: if(fetch_message) {fetch_hello({});console.log(\"fetch_message\");}\nlet RESPONSE = null;\n// let NAME = 'user1';\nlet NAME = 'user2';\nlet PASSWORD = 'user_pass2';\nlet TEST_MODE = 'TEST_MODE';\n// let TEST_MODE = 'PRODUCTION_MODE';\n// let PASSWORD = 'user_pass1';\nlet COMMENT = 'comment1';\nlet COMMENT_REPLY = 'reply1';\nlet TAG = 'tag1';\nlet ALL_TAGS = [];\nlet TAG_VAL = \"\";\nlet ORDER_BY = 'ASC';\nlet ORDER_BY_COLUMN = 'id';\nlet REQ_TAG = '';\nlet USER = '';\nlet ERROR_MESSAGE = \"\";\nlet SUCCESS_MESSAGE = '';\nlet ERROR_MESSAGE_STACK = [];\nlet SUCCESS_MESSAGE_STACK = [];\nlet FETCH_TEST_DATA = [{'value': 0},{'value2': 1}];\n// let DOMAIN_NAME = 'https://spectrum-whip-sulfur.glitch.me/';\nconst DOMAIN_NAME = 'http://localhost:8000/';\nreturn {\n\tRESPONSE,\n\tNAME,\n\tPASSWORD,\n\tTEST_MODE,\n\tCOMMENT,\n\tCOMMENT_REPLY,\n\tTAG,\n\tTAG_VAL,\n\tORDER_BY,\n\tORDER_BY_COLUMN,\n\tREQ_TAG,\n\tUSER,\n\tERROR_MESSAGE,\n\tSUCCESS_MESSAGE,\n\tERROR_MESSAGE_STACK,\n\tSUCCESS_MESSAGE_STACK,\n\tFETCH_TEST_DATA,\n\tALL_TAGS,\n\tDOMAIN_NAME,\n};\n};\nlet {RESPONSE, NAME, PASSWORD, TEST_MODE, COMMENT, COMMENT_REPLY, TAG, TAG_VAL, ORDER_BY, ORDER_BY_COLUMN, REQ_TAG, USER, ERROR_MESSAGE, SUCCESS_MESSAGE, ERROR_MESSAGE_STACK, SUCCESS_MESSAGE_STACK, FETCH_TEST_DATA, ALL_TAGS, DOMAIN_NAME} = all_web_prop_fn();\nconst all_fetch_fn = ()  => {\n\tconst get_POST_object = (BODY_OBJ) => {\n\t\tconsole.log(BODY_OBJ);\n\t\treturn {\n\t\tmethod: 'POST',\n\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\tbody: JSON.stringify(BODY_OBJ)\n\t\t}\n\t};\n\t// linkのidとusernameが一致するものがある場合はupdateする\n\t// 一致した場合はupdateで、一致しない場合はinsertになる関数\n\t// server sideでLink_idとuser_idの一致は確認しているので、ここではupdateのLink_idとuser_idの一致を確認する必要はない\n\tconst fetch_insert_or_update_link = async (Link_id) => {\n\t\ttry {\n\t\t\tconst DATA_JSON_STR = pre_upload_for_make_json_str();\n\t\t\t// Link_idとuser_idが一致するものがある場合はupdateする\n\t\t\tif(Link_id !== undefined  && Link_id !== null && Link_id !== 0){\n\t\t\t\tconsole.log('update');\n\t\t\t\tRESPONSE = await (await fetch(DOMAIN_NAME+'update_link', get_POST_object({ name: NAME, password: PASSWORD, link_id: Link_id, data_json_str: DATA_JSON_STR }))).json();\n\t\t\t\tawait response_handling(RESPONSE);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconsole.log('insert');\n\t\t\tawait fetch_insert_link();\n\t\t} catch (error) {ERROR_MESSAGE = error.message;}\n\t};\n\tconst fetch_hello = async ({ORDER_BY_PARAM='DESC', ORDER_BY_COLUMN_PARAM='id', REQ_TAG_PARAM, USER_PARAM}) => {\n\t\ttry {\n\t\t// console.log(REQ_TAG_PARAM);\n\t\tORDER_BY = ORDER_BY_PARAM; // ? ORDER_BY_PARAM : 'DESC';\n\t\tORDER_BY_COLUMN = ORDER_BY_COLUMN_PARAM; // ? ORDER_BY_COLUMN_PARAM : 'links.id';\n\t\tREQ_TAG = REQ_TAG_PARAM; // ? REQ_TAG_PARAM : null;\n\t\tUSER = USER_PARAM; // ? USER_PARAM : null;\n\t\tconst make_get_param = () => {\n\t\t\tconst get_param_array = [];\n\t\t\tif(ORDER_BY) {get_param_array.push(`order_by=${ORDER_BY}`)};\n\t\t\tif(ORDER_BY_COLUMN) {get_param_array.push(`order_by_column=${ORDER_BY_COLUMN}`)};\n\t\t\tif(REQ_TAG) {get_param_array.push(`tag=${REQ_TAG}`)};\n\t\t\tif(USER) {get_param_array.push(`user=${USER}`)};\n\t\t\tconst endpoint = DOMAIN_NAME+'read_all';\n\t\t\tconst get_param = get_param_array.join('&');\n\t\t\treturn `${endpoint}?${get_param}`;\n\t\t};\n\t\tconst res = await (await fetch(make_get_param())).json();\n\t\tif(res.result === 'fail') throw new Error(res.error);\n\t\tconst pre_result = await (await fetch(make_get_param())).json();\n\t\t// pre_resultが空の場合はエラーを投げる\n\t\tif(pre_result.length === 0) throw new Error('条件に一致するデータがありませんでした');\n\t\tHELLO_FETCH_DATA = pre_result.message;\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t\tERROR_MESSAGE = error.message;\n\t\t}\n\t};\n\tconst response_handling = async (RESPONSE) => {\n\t\ttry {\n\t\t\tconsole.log(RESPONSE);\n// res.status(400).json({status: 400, result: 'fail', message: error.message});\n\t\t// RESPONSE.status === 400 ? console.log('RESPONSE.status: RESPONSE.status === 400') : null;\n\t\tRESPONSE.status === 200 ? SUCCESS_MESSAGE = RESPONSE.result : null;\n\t\t(RESPONSE.result === 'fail' || RESPONSE.status === 400) ? (()=>{throw new Error(RESPONSE.message)})() : (await fetch_hello({}));\n\t\t} catch (error) {\n\t\t\tconsole.log(error.message);\n\t\t\t(()=>{throw new Error(error.message)})();\n\t\t}\n\t}\n\t// URLの配列の文字列から始まる場合はtrueを返す関数を1行で\n\t// const is_include_WHITE_LIST_URL = (target_url_str, WHITE_LIST_URL_ARRAY) => WHITE_LIST_URL_ARRAY.some((WHITE_LIST_URL) => target_url_str.startsWith(WHITE_LIST_URL));\n\tconst fetch_insert_link = async (sample_data) => {\n\t\ttry {\n\t\t// listのcheckを全部falseにし、change_dateを現在時刻にする\n\t\tconst DATA_JSON_STR = pre_upload_for_make_json_str();\n\t\tRESPONSE = await (await fetch(DOMAIN_NAME+'insert_link', get_POST_object({ name: NAME, password: PASSWORD, data_json_str: DATA_JSON_STR }))).json();\n\t\t// RESPONSEのstatusが200の場合はmessageの値をIDに代入(lastInsertRowidとlinksテーブルのidは基本的には別だが、INTEGER PRIMARY KEYとして定義された列は、特別な扱いを受け、その列の値はROWIDと同じになります。)\n\t\tRESPONSE.status === 200 ? ID = RESPONSE.message : null;\n\t\tconsole.log(RESPONSE);\n\t\tawait response_handling(RESPONSE);\n\t\tawait fetch_hello({});\n\n\t\t} catch (error) {ERROR_MESSAGE = error.message;}\n\t};\n\t// copy insert(他のユーザーのlinkをコピーして自分のlinkとして保存する)\n\t// copyするときはcheckを全部falseでchange_dateを現在時刻にする\n\tconst fetch_copy_insert_link = async (DATA) => {\n\t\ttry {\n\t\tconst DATA_JSON_STR = JSON.stringify(DATA);\n\t\tRESPONSE = await (await fetch(DOMAIN_NAME+'insert_link', get_POST_object({ name: NAME, password: PASSWORD, data_json_str: DATA_JSON_STR }))).json();\n\t\tawait response_handling(RESPONSE);\n\t\t} catch (error) {ERROR_MESSAGE = error.message;}\n\t};\n\tconst fetch_delete_link = async (LINK_ID) => {\n\t\ttry {\n\t\tRESPONSE = await (await fetch(DOMAIN_NAME+'delete_link', get_POST_object({ name: NAME, password: PASSWORD, id: LINK_ID }))).json();\n\t\tawait response_handling(RESPONSE);\n\t\t} catch (error) {ERROR_MESSAGE = error.message;}\n\t}\n\tconst fetch_like_increment_or_decrement = async (LINK_ID) => {\n\t\ttry {\n\t\tRESPONSE = await (await fetch(DOMAIN_NAME+'like_increment_or_decrement', get_POST_object({ name: NAME, password: PASSWORD, link_id: LINK_ID }))).json()\n\t\tawait response_handling(RESPONSE);\n\t\t} catch (error) {ERROR_MESSAGE = error.message;}\n\t};\n\tconst fetch_insert_comment = async (Link_id) => {\n\t\ttry {\n\t\tRESPONSE = await (await fetch(DOMAIN_NAME+'insert_comment', get_POST_object({ name: NAME, password: PASSWORD, link_id: Link_id, comment: COMMENT }))).json();\n\t\tawait response_handling(RESPONSE);\n\t\t} catch (error) {ERROR_MESSAGE = error.message;}\n\t};\n\tconst fetch_delete_comment = async (COMMENT_ID) => {\n\t\ttry {\n\t\tRESPONSE = await (await fetch(DOMAIN_NAME+'delete_comment', get_POST_object({ name: NAME, password: PASSWORD, comment_id: COMMENT_ID }))).json();\n\t\tawait response_handling(RESPONSE);\n\t\t} catch (error) {ERROR_MESSAGE = error.message;}\n\t}\n\tconst fetch_insert_comment_reply = async (Comment_id) => {\n\t\ttry {\n\t\tRESPONSE = await (await fetch(DOMAIN_NAME+'insert_comment_reply', get_POST_object({ name: NAME, password: PASSWORD, comment_id: Comment_id, comment_reply: COMMENT_REPLY }))).json();\n\t\tawait response_handling(RESPONSE);\n\t\t} catch (error) {ERROR_MESSAGE = error.message;}\n\t};\n\tconst fetch_delete_comment_reply = async (Comment_reply_id) => {\n\t\ttry {\n\t\tRESPONSE = await (await fetch(DOMAIN_NAME+'delete_comment_reply', get_POST_object({ name: NAME, password: PASSWORD, comment_reply_id: Comment_reply_id }))).json();\n\t\tawait response_handling(RESPONSE);\n\t\t} catch (error) {ERROR_MESSAGE = error.message;}\n\t};\n\tconst fetch_insert_tag = async (LINK_ID, TAG_PARAM) => {\n\t\tconsole.log(\"fetch_insert_tag\");\n\t\ttry {\n\t\tTAG = TAG_PARAM || TAG_VAL.value;\n\t\tRESPONSE = await (await fetch(DOMAIN_NAME+'insert_tag', get_POST_object({ name: NAME, password: PASSWORD, link_id: LINK_ID, tag: TAG }))).json();\n\t\tawait response_handling(RESPONSE);\n\t\t} catch (error) {ERROR_MESSAGE = error.message;}\n\t};\n\tconst fetch_get_collect_value_for_test = async () => {\n\t\ttry {\n\t\tconst RESULT_OF_TEST = await (await fetch(DOMAIN_NAME+'get_collect_value_for_test', get_POST_object({ name: NAME, password: PASSWORD }))).json();\n\t\tFETCH_TEST_DATA = RESULT_OF_TEST.message;\n\t\t} catch (error) {\n\t\tconsole.log(error);\n\t\t}\n\t};\nconst fetch_get_tags_for_autocomplete = async () => {\ntry {\nRESPONSE = await (await fetch(DOMAIN_NAME+'get_tags_for_autocomplete', get_POST_object({ name: NAME, password: PASSWORD }))).json();\nawait response_handling(RESPONSE);\nif(RESPONSE.message){\n\t// ALL_TAGS = RESPONSE.message.map((item) => item.tag);\n\tALL_TAGS = RESPONSE.message;\n}\n// ALL_TAGS = RESPONSE.message;\n} catch (error) {ERROR_MESSAGE = error.message;}\n};\n\tconst remove_error_message = () => ERROR_MESSAGE = \"\";\n\t// <button on:click={() => ORDER_BY_COLUMN === 'links.id' ? ORDER_BY_COLUMN = 'created_at' : ORDER_BY_COLUMN === 'created_at' ? ORDER_BY_COLUMN = 'updated_at' : ORDER_BY_COLUMN = 'links.id'}>ORDER_BY_COLUMN: {ORDER_BY_COLUMN}</button>\n\t// const fetch_hello = async ({ORDER_BY_PARAM='DESC', ORDER_BY_COLUMN_PARAM='links.id', REQ_TAG_PARAM, USER_PARAM}) => {\n\tconst order_by_column_and_fetch_hello = async () => {\n\t\tswitch (true) {\n\t\t\tcase ORDER_BY_COLUMN === 'id' : ORDER_BY_COLUMN = 'created_at'; break;\n\t\t\tcase ORDER_BY_COLUMN === 'created_at' : ORDER_BY_COLUMN = 'updated_at'; break;\n\t\t\tcase ORDER_BY_COLUMN === 'updated_at' :  ORDER_BY_COLUMN = 'id'; break;\n\t\t\tdefault: ORDER_BY_COLUMN = 'id'; break;\n\t\t}\n\t\tawait fetch_hello({\n\t\t\tORDER_BY_PARAM: ORDER_BY,\n\t\t\tORDER_BY_COLUMN_PARAM: ORDER_BY_COLUMN,\n\t\t\tREQ_TAG_PARAM: 'TEST',\n\t\t});\n\t};\n\tconst order_by_and_fetch_hello = async () => {\n\t\tswitch (true) {\n\t\t\tcase ORDER_BY === 'ASC' : ORDER_BY = 'DESC'; break;\n\t\t\tcase ORDER_BY === 'DESC' :  ORDER_BY = 'ASC'; break;\n\t\t\tdefault: ORDER_BY_COLUMN = 'DESC'; break;\n\t\t}\n\t\tawait fetch_hello({\n\t\t\tORDER_BY_PARAM: ORDER_BY,\n\t\t\tORDER_BY_COLUMN_PARAM: ORDER_BY_COLUMN,\n\t\t\t// REQ_TAG_PARAM: 'TEST',\n\t\t});\n\t};\n\tconst req_tag_and_fetch_hello = async (TAG) => {\n\t\tREQ_TAG = TAG;\n\t\tawait fetch_hello({\n\t\t\tREQ_TAG_PARAM: REQ_TAG,\n\t\t});\n\t};\n\tconst user_and_fetch_hello = async (USER) => {\n\t\tconst USER_VAL = USER ? USER : 'user1';\n\t\tawait fetch_hello({\n\t\t\tUSER_PARAM: USER_VAL,\n\t\t});\n\t};\n\t// returnで全ての関数が含まれたオブジェクトを返す\n\treturn {\n\t\tget_POST_object,\n\t\tfetch_insert_or_update_link,\n\t\tfetch_hello,\n\t\tfetch_insert_link,\n\t\tfetch_delete_link,\n\t\tfetch_like_increment_or_decrement,\n\t\tfetch_insert_comment,\n\t\tfetch_delete_comment,\n\t\tfetch_insert_comment_reply,\n\t\tfetch_delete_comment_reply,\n\t\tfetch_insert_tag,\n\t\tfetch_copy_insert_link,\n\t\tfetch_get_collect_value_for_test,\n\t\tfetch_get_tags_for_autocomplete,\n\t\tremove_error_message,\n\t\torder_by_column_and_fetch_hello,\n\t\torder_by_and_fetch_hello,\n\t\treq_tag_and_fetch_hello,\n\t\tuser_and_fetch_hello,\n\t};\n};\nconst {get_POST_object,fetch_insert_or_update_link,fetch_hello,fetch_insert_link,fetch_delete_link,fetch_like_increment_or_decrement,fetch_insert_comment,fetch_delete_comment,fetch_insert_comment_reply,fetch_delete_comment_reply,fetch_insert_tag,fetch_copy_insert_link,fetch_get_collect_value_for_test,fetch_get_tags_for_autocomplete,remove_error_message,order_by_column_and_fetch_hello,order_by_and_fetch_hello,req_tag_and_fetch_hello,user_and_fetch_hello,} = all_fetch_fn();\nconst all_test_fn = ()  => {\n\tconst test_db_init_only_set_name_password_test_mode = async () =>{\n    (NAME = 'testuser',PASSWORD = 'duct_mean_fuckst1ck',TEST_MODE = 'TEST_MODE');\n    console.log('success');\n}\nconst test_db_init = async (Start_Or_End) =>{\n    try {\n\tconsole.log(Start_Or_End);\n\tconsole.log(\"test_db_init 1\");\n    (NAME = 'testuser',PASSWORD = 'duct_mean_fuckst1ck',TEST_MODE = 'TEST_MODE');\n\tconsole.log(\"test_db_init 2\");\n\tif(Start_Or_End === \"start\"){\n\t\tRESPONSE = await (await fetch(DOMAIN_NAME+'test_db_init', get_POST_object({ name: NAME, password: PASSWORD, test_mode: \"TEST_MODE\" }))).json();\n\n\t};\n\tif(Start_Or_End === \"end\"){\n\t\tRESPONSE = await (await fetch(DOMAIN_NAME+'test_db_init', get_POST_object({ name: NAME, password: PASSWORD, test_mode: \"TEST_MODE\", test_mode_close: 'TEST_MODE_CLOSE' }))).json();\n\t};\n\tconsole.log(\"test_db_init 3\");\n\tconsole.log(RESPONSE);\n\tawait response_handling(RESPONSE);\n\n    // RESPONSE = await (await fetch(DOMAIN_NAME+'test_db_init', get_POST_object({ name: NAME, password: PASSWORD, test_mode: TEST_MODE }))).json();\n\t// console.log(RESPONSE);\n    // RESPONSE.result === 'fail' ? (()=>{throw new Error(RESPONSE.error)})() : null;\n    } catch (error) {\n    ERROR_MESSAGE = error.message;\n    }\n}\nconst test_message_stacker = (Data, Expect_result) =>{\n\tfunction add_SUCESS_MESSAGE(New_Data) {\n\t\tSUCCESS_MESSAGE_STACK = [...SUCCESS_MESSAGE_STACK, New_Data]\n\t};\n    SUCCESS_MESSAGE === 'success'\n        // ? (console.log('OK'), SUCCESS_MESSAGE_STACK.push(['OK', (Data?Data+'は':'') + 'OK']))\n        ? (console.log('OK'), add_SUCESS_MESSAGE(['OK', (Data?Data+'は':'') + 'OK'])) : null;\n\tfunction add_ERROR_MESSAGE_STACK(New_ERROR) {\n\t\t// fruits = [...fruits, newFruit];\n\t\tERROR_MESSAGE_STACK = [...ERROR_MESSAGE_STACK, New_ERROR];\n\t}\n    ERROR_MESSAGE === Expect_result\n        // ? (console.log('OK'), ERROR_MESSAGE_STACK.push(['OK', Expect_result]))\n        ? (console.log('OK'), add_ERROR_MESSAGE_STACK([\"OK\", Expect_result]))\n\t\t\t : console.log('NG');\n}\nconst test_for_LINK = async (\n    {\n        Data='SELECT',\n\t\tSample=1,\n        Expect_result='SQLの予約語を含む場合はエラー'\n    }\n    ) =>{\n\n\tawait fetch_insert_link();\n    test_message_stacker(Data, Expect_result);\n}\nconst test_for_TAG = async (\n    {\n        Data='test!',\n        Param_of_link_id=1,\n        Expect_result='記号を含む場合はエラー'\n    }\n    ) =>{\n    await fetch_insert_tag(Param_of_link_id, Data);\n    test_message_stacker(Data, Expect_result);\n}\n\nconst test_for_COMMENT = async (\n    {\n        Data=('a'.repeat(51)),\n        Param_of_link_id=1,\n        Expect_result='commentの文字数がdata_limitを超える場合はエラー'\n    }\n    ) =>{\n    COMMENT = Data;\n    await fetch_insert_comment(Param_of_link_id);\n    test_message_stacker(Data, Expect_result);\n}\n\nconst test_for_COMMENT_REPLY = async (\n    {\n        Data=('a'.repeat(51)),\n        Param_of_comment_id=1,\n        Expect_result='commentの文字数がdata_limitを超える場合はエラー'\n    }\n) =>{\n    COMMENT_REPLY = Data;\n    await fetch_insert_comment_reply(Param_of_comment_id);\n    test_message_stacker(Data, Expect_result);\n}\n\nconst test_for_LIKE_INCREMENT_OR_DECREMENT = async (\n    {\n        Data='',\n        Param_of_link_id=1,\n        Expect_result='success'\n    }\n) =>{\n    await fetch_like_increment_or_decrement(Param_of_link_id);\n    test_message_stacker(Data, Expect_result);\n}\n\nconst test_sample_exe = async () => {\n    await test_db_init(\"start\");\n    await test_for_LINK({\n        Data: 'SELECT',\n\t\tSample: 1,\n        Expect_result: 'SQLの予約語を含む場合はエラー'\n    });\n    await test_for_LINK({\n        Data: 'SELECT',\n\t\tSample: 2,\n        Expect_result: 'SQLの予約語を含む場合はエラー'\n    });\n\n    console.log(ERROR_MESSAGE_STACK);\n    console.log(SUCCESS_MESSAGE_STACK);\n}\n\nconst test_sample_exe2 = async () => {\n    await test_for_TAG({\n        Param_of_link_id: 1,\n        Expect_result: '記号を含む場合はエラー'\n    });\n    await test_for_TAG({\n        Data: 'test!',\n        Param_of_link_id: 1,\n        Expect_result: '記号を含む場合はエラー'\n    });\n    await test_for_TAG({\n        Data: 'test tag',\n        Param_of_link_id: 1,\n        Expect_result: '空白を含む場合はエラー'\n    });\n    await test_for_TAG({\n        Data: 'testlong',\n        Param_of_link_id: 1,\n        Expect_result: '7文字以上はエラー'\n    });\n    await test_for_TAG({\n        Data: 'SELECT',\n        Param_of_link_id: 1,\n        Expect_result: 'SQLの予約語を含む場合はエラー'\n    });\n    await test_for_TAG({\n        Data: 'test',\n        Param_of_link_id: 1,\n        Expect_result: 'OK'\n    });\n    // 既に同じタグがついています\n    await test_for_TAG({\n        Data: 'test',\n        Param_of_link_id: 1,\n        Expect_result: '既に同じタグがついています'\n    });\n    // 別のlinkへのtagはエラーにならない\n    await test_for_TAG({\n        Data: 'test',\n        Param_of_link_id: 2,\n        Expect_result: 'OK'\n    });\n    // 既に同じタグがついています\n    await test_for_TAG({\n        Data: 'test',\n        Param_of_link_id: 2,\n        Expect_result: '既に同じタグがついています'\n    });\n\n    await test_for_TAG({\n        Data: 'TEST',\n        Param_of_link_id: 1,\n        Expect_result: 'OK'\n    });\n\n    console.log(ERROR_MESSAGE_STACK);\n    console.log(SUCCESS_MESSAGE_STACK);\n}\n\nconst test_sample_exe3 = async () => {\n    // 'commentの文字数がdata_limitを超える場合はエラー'\n    // 'should return \"commentの文字数がdata_limit(test userは1000)を超える場合はエラー\" when comment length is greater than data limit'\n    // error_check_insert_comment('a'.repeat(1500), 50);\n\n    await test_for_COMMENT({\n        Data: 'a'.repeat(1500),\n        Param_of_link_id: 1,\n        Expect_result: 'commentの文字数がdata_limit(test userは50)を超える場合はエラー'\n    });\n    // 'should return \"0文字の場合はエラー\" when comment length is 0'\n    // error_check_insert_comment('', 100);\n    await test_for_COMMENT({\n        Data: '',\n        Param_of_link_id: 1,\n        Expect_result: '0文字の場合はエラー'\n    });\n    // 'should return \"空白を含む場合はエラー\" when comment contains spaces'\n    // error_check_insert_comment('This is a comment with spaces', 100);\n    await test_for_COMMENT({\n        Data: 'This is a comment with spaces',\n        Param_of_link_id: 1,\n        Expect_result: '空白を含む場合はエラー'\n    });\n    // 'should return \"記号を含む場合はエラー\" when comment contains symbols'\n    // error_check_insert_comment('This is a comment with ! symbol', 100);\n    await test_for_COMMENT({\n        Data: 'This!Symbol',\n        Param_of_link_id: 1,\n        Expect_result: '記号を含む場合はエラー'\n    });\n    // 'should return \"300文字以上はエラー\" when comment length is greater than 300'\n    // error_check_insert_comment('a'.repeat(301), 100);\n    await test_for_COMMENT({\n        Data: 'a'.repeat(301),\n        Param_of_link_id: 1,\n        Expect_result: '300文字以上はエラー'\n    });\n    // 'should return \"SQLの予約語を含む場合はエラー\" when comment contains SQL reserved words'\n    // error_check_insert_comment('SELECT * FROM comments', 100);\n    await test_for_COMMENT({\n        Data: 'SELECT * FROM comments',\n        Param_of_link_id: 1,\n        Expect_result: 'SQLの予約語を含む場合はエラー'\n    });\n    // 'should return \"OK\" when comment is valid'\n    // error_check_insert_comment('This is a valid comment', 100);\n    await test_for_COMMENT({\n        Data: 'ThisIsaValidComment',\n        Param_of_link_id: 1,\n        Expect_result: 'OK'\n    });\n}\n\nconst test_sample_exe4 = async () => {\n    // 'comment_replyが空の場合はエラー'\n    // 'comment_replyの文字数がdata_limitを超える場合はエラー'\n    await test_for_COMMENT_REPLY({\n        Data: 'a'.repeat(1500),\n        Param_of_comment_id: 1,\n        Expect_result: 'comment_replyの文字数がdata_limit(test userは50)を超える場合はエラー'\n    });\n    // '0文字の場合はエラー'\n    await test_for_COMMENT_REPLY({\n        Data: '',\n        Param_of_comment_id: 1,\n        Expect_result: '0文字の場合はエラー'\n    });\n    // '記号を含む場合はエラー'\n    await test_for_COMMENT_REPLY({\n        Data: 'This!Symbol',\n        Param_of_comment_id: 1,\n        Expect_result: '記号を含む場合はエラー'\n    });\n    // '空白を含む場合はエラー'\n    await test_for_COMMENT_REPLY({\n        Data: 'spa ces',\n        Param_of_comment_id: 1,\n        Expect_result: '空白を含む場合はエラー'\n    });\n    // '10文字以上はエラー'\n    await test_for_COMMENT_REPLY({\n        Data: 'a'.repeat(11),\n        Param_of_comment_id: 1,\n        Expect_result: '10文字以上はエラー'\n    });\n    // 'SQLの予約語を含む場合はエラー'\n    await test_for_COMMENT_REPLY({\n        Data: 'SELECT * FROM comments',\n        Param_of_comment_id: 1,\n        Expect_result: 'SQLの予約語を含む場合はエラー'\n    });\n    // 'OK'\n    await test_for_COMMENT_REPLY({\n        Data: 'ValidRep',\n        Param_of_comment_id: 1,\n        Expect_result: 'OK'\n    });\n    // 同じユーザーから同じcommentへのreplyが既に存在する場合はエラー\n    await test_for_COMMENT_REPLY({\n        Data: 'ValidRep',\n        Param_of_comment_id: 1,\n        Expect_result: '同じユーザーから同じcommentへのreplyが既に存在する場合はエラー'\n    });\n}\n\nconst test_sample_exe5 = async () => {\n    // link_idがありません\n    await test_for_LIKE_INCREMENT_OR_DECREMENT({\n        Param_of_link_id: 1000000000,\n        Expect_result: 'link_idがありません'\n    });\n    // message.response = 'increment_it';\n    await test_for_LIKE_INCREMENT_OR_DECREMENT({\n        Param_of_link_id: 1,\n        Expect_result: 'success'\n    });\n    // message.response = 'decrement_it';\n    await test_for_LIKE_INCREMENT_OR_DECREMENT({\n        Param_of_link_id: 1,\n        Expect_result: 'success'\n    });\n    // do like again\n    await test_for_LIKE_INCREMENT_OR_DECREMENT({\n        Param_of_link_id: 1,\n        Expect_result: 'success'\n    });\n}\nreturn {\ntest_message_stacker,\ntest_db_init_only_set_name_password_test_mode,\ntest_db_init,\ntest_for_LINK,\ntest_for_TAG,\ntest_for_COMMENT,\ntest_for_COMMENT_REPLY,\ntest_for_LIKE_INCREMENT_OR_DECREMENT,\ntest_sample_exe,\ntest_sample_exe2,\ntest_sample_exe3,\ntest_sample_exe4,\ntest_sample_exe5,\n}\n\n};\nconst {test_message_stacker,test_db_init_only_set_name_password_test_mode,test_db_init,test_for_LINK,test_for_TAG,test_for_COMMENT,test_for_COMMENT_REPLY,test_for_LIKE_INCREMENT_OR_DECREMENT,test_sample_exe,test_sample_exe2,test_sample_exe3,test_sample_exe4,test_sample_exe5,} = all_test_fn();\nimport { onMount } from 'svelte';\nimport { afterUpdate } from 'svelte';\nimport { isURL } from 'validator';\n// $: if(fetch_message) {fetch_hello({});console.log(\"fetch_message\");} listが更新されたらhtmlを更新する\n$: {\n\t// console.log(ALL_DATA_LIST[0], \"ALL_DATA_LIST[0]が更新されたらhtmlを更新する\");\n\t// console.log(LIST, \"LISTが更新されたらhtmlを更新する\");\n\n\t// LIST = ALL_DATA_LIST[0]['list'];\n\t// LIST = ALL_DATA_LIST[0]['list'];\n\t// ALL_DATA_LIST = get_new_ALL_DATA_LIST();\n\t// console.log(ALL_DATA_LIST, \"listが更新されたらhtmlを更新する\");\n};\n\nonMount(async () => {\n\ttry {\n\t\tawait fetch_hello({});\n\t\tawait fetch_get_tags_for_autocomplete();\n\t\t// await init_calendar();\n\t\t// await init(JSON.parse(HELLO_FETCH_DATA[0]['data_json_str']['data1']));\n\t} catch (error) {}\n});\t\nafterUpdate(async () => {\n\ttry {\n\t\t\n\t\t// await fetch_get_tags_for_autocomplete();\n\t} catch (error) {\n\t\tconsole.log(error);\t\t\n\t}\n});\n\n\nconst init = (item, User_Name) => {\n\ttry {\n\t// console.log(\"item\", item,\"User_Name\", User_Name);\n\tpre_download_for_parse_json_str(item.id, item['data_json_str']);\n\t// console.log(\"LIST\", LIST,\"DESCRIPTION\", DESCRIPTION,);\n\t} catch (error) {console.log(error);ERROR_MESSAGE = error.message;}\n};\n// const all_calendar_fn = () => {\n//     let calendar_val = null;\n//     let all_event = null;\n// \tconst toggle_calendar = () => IS_CALENDAR_VISIBLE = !IS_CALENDAR_VISIBLE;\n//     const init_calendar = () =>{\n//         const calendarEl = document.getElementById('calendar');\n//         const calendar = new FullCalendar.Calendar(calendarEl, {\n//             initialView: 'dayGridMonth',\n//             displayEventTime: false, // イベントの時刻を非表示にする\n//         });\n//         calendar.render();\n//         calendar_val = calendar;\n//     }\n//     // イベント表示\n//     function show_event(){\n//             // イベントを一括で取り出す\n//         var events = calendar_val.getEvents();\n//         events.forEach(function(event) {\n//             // console.log('Title: ' + event.title + ', Start: ' + event.start);\n//             console.log({\"event\": event, \"event.title\": event.title, \"event.start\": event.start});\n//         });\n//         all_event = events;\n//     }\n//     function add_event(Title=\"+\", Date){\n//         calendar_val.addEvent({\n//             title: Title,\n//             allDay: false,\n//             start: Date,\n//         });\n//         show_event();\n//     }\n//     function delete_event(date){\n//         var events = calendar_val.getEvents();\n//         events.forEach(function(event) {\n//             if(event.start.getFullYear() === date.getFullYear() &&\n//             event.start.getMonth() === date.getMonth() &&\n//             event.start.getDate() === date.getDate() \n//                 //    秒まで一致しているか\n//             &&\n//             event.start.getHours() === date.getHours() &&\n//             event.start.getMinutes() === date.getMinutes() &&\n//             event.start.getSeconds() === date.getSeconds()\n//             ){\n//                 event.remove();\n//             }\n//         });\n//     }\n// \treturn {\n// \t\tIS_CALENDAR_VISIBLE,\n// \t\tcalendar_val,\n// \t\tall_event,\n// \t\ttoggle_calendar,\n//         init_calendar,\n//         show_event,\n//         add_event,\n//         delete_event,\n//     }\n// };\n// const {calendar_val,all_event,toggle_calendar,init_calendar,show_event,add_event,delete_event,} = all_calendar_fn();\n</script>\n\n\n<header>\nRESPONSE: {JSON.stringify(RESPONSE)}\nSUCCESS_MESSAGE_STACK: {JSON.stringify(SUCCESS_MESSAGE_STACK)}\nERROR_MESSAGE_STACK: {JSON.stringify(ERROR_MESSAGE_STACK)}\n<!-- <button on:click={() => all_event_check()}>all_event_check</button> -->\n<!-- <button on:click={() => test_db_init_only_set_name_password_test_mode()}>test_db_init_only_set_name_password_test_mode</button> -->\n<!-- <button on:click={() => test_sample_exe({})}>test_sample_exe</button> -->\n<!-- <button on:click={() => test_sample_exe2({})}>test_sample_exe2</button> -->\n<!-- <button on:click={() => test_sample_exe3({})}>test_sample_exe3</button> -->\n<!-- <button on:click={() => test_sample_exe4({})}>test_sample_exe4</button> -->\n<!-- <button on:click={() => test_sample_exe5({})}>test_sample_exe5</button> -->\n<!-- <button on:click={() => test_db_init({})}>test_db_init</button> -->\n<!-- <button on:click={() => test_db_init(\"start\")}>test_db_init_start</button> -->\n<!-- <button on:click={() => test_db_init(\"end\")}>test_db_init_end</button> -->\n<!-- <button on:click={() => test_sample_exe({})}>test_sample_exe</button> -->\n<!-- <button on:click={() => toggle_left_or_right_side({})}>toggle_left_or_right_side</button> -->\n</header>\n\n<main>\n<aside class=\"left_side\">\n\t<div class={IS_SHOW_LEFT ? '' : 'hidden'}>\n\t\t<div class=\"one_pack\">\n\t\t\t<div><button on:click={make_new_blank_list}>Make New Blank List</button></div>\n\t\t\t{JSON.stringify(LIST)}\n\t\t\t<button on:click={sort_by_id}>Sort by ID</button>\n\t\t\t<button on:click={sort_by_text}>Sort by Text</button>\n\t\t\t<button on:click={sort_by_add_date}>Sort by Add Date</button>\n\t\t\t<button on:click={sort_by_update_date}>Sort by Update Date</button>\n\t\t\t<button on:click={sort_by_check_date}>Sort by Check Date</button>\n\t\t\t{#if ID !== 0}<div class=\"id\"><span>ID: {ID}</span></div>{/if}\n\t\t\t<div class=\"description\">\n\t\t\t<span>DESCRIPTION: {DESCRIPTION}</span>\n\t\t\t{#if IS_EDITING_DESCRIPTION === true}\n\t\t\t\t<input type=\"text\" bind:value={DESCRIPTION} on:input={(e) => edit_description(e)} class=\"without_click\" />\n\t\t\t{/if}\n\t\t\t<button on:click={()=> toggle_EDITING_DESCRIPTION()} class=\"detail_button\">▶️</button>\n\t\t\t</div>\n\t\t\t<br class=\"space\">\n\t\t\t\n\t\t\t{#each LIST as item, index}\n\t\t\t<div class=\"each_item\">\n\t\t\t\t<div>\n\t\t\t\t\tID: {item.id}\n\t\t\t\t\tTEXT: {item.text}\n\t\t<!-- 年 月　日 時 分　秒　形式で列挙 -->\n\t\t<!-- add_date: {new Date(item.add_date).getFullYear()}/{new Date(item.add_date).getMonth() + 1}/{new Date(item.add_date).getDate()} {new Date(item.add_date).getHours()}:{new Date(item.add_date).getMinutes()} {new Date(item.add_date).getSeconds()}<br> -->\n\t\t<!-- update_date: {new Date(item.update_date).getFullYear()}/{new Date(item.update_date).getMonth() + 1}/{new Date(item.update_date).getDate()} {new Date(item.update_date).getHours()}:{new Date(item.update_date).getMinutes()} {new Date(item.update_date).getSeconds()}<br> -->\n\t\tcheck_date: {new Date(item.check_date).getFullYear()}/{new Date(item.check_date).getMonth() + 1}/{new Date(item.check_date).getDate()} {new Date(item.check_date).getHours()}:{new Date(item.check_date).getMinutes()} {new Date(item.check_date).getSeconds()}<br>\n\t\t\n\t\t\n\t\t\t\t\t<button on:click={()=> toggle_details(item.id)} class=\"detail_button\">▶️</button>\n\t\t\t\t\t<!-- check_date_update button check_on_offがtrueならchecked -->\n\t\t\t\t\t<input type=\"checkbox\" on:change={() => check_date_update(item.id)} bind:checked={item.check_on_off} />\n\t\t\t\t</div>\n\t\t\t\t<div style=\"display: {SELECTED_ITEM_ID === item.id ? 'block' : 'none'};\">\n\t\t\t\t\t<input type=\"text\" bind:value={item['text']} on:input={(e) => edit_list(item.id, e)} class=\"without_click\" />\n\t\t\t\t\t<div>Add Date: {item['add_date']}</div>\n\t\t\t\t\t<div>Update Date: {item['update_date']}</div>\n\t\t\t\t\t<button on:click={()=> remove_list(item.id)}>Remove</button>\n\t\t\t\t\t<button on:click={()=> toggle_details(item.id)} class=\"detail_button\">▶️</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<br class=\"space\">\n\t\t\t{/each}\n\t\t\t<button on:click={() => add_list()}>add_list</button>\n\t\t</div>\n\t\t\n\t\t\n\t\t\n\n\t\t\t\t\t<button on:click={() => fetch_insert_or_update_link(ID)}>fetch_insert_or_update_link</button>\n\t\t\t\t\t<!-- <button on:click={() => fetch_insert_link({})}>fetch_insert_link</button> -->\n\t\t\t\t\t<button on:click={() => fetch_hello({})}>CLEAR</button>\n\n\t</div>\n</aside>\n\n<aside class=\"right_side\">\n\t<div class={IS_SHOW_RIGHT ? '' : 'hidden'}>\n\t<form>\n\t<!-- debag用(HTMLと変数をバインドしないとchromeのconsoleでapp.$$.ctxで表示されないため) -->\n\tname: <input bind:value={NAME} type=\"text\" placeholder=\"name\" autocomplete=\"username\"\n\ton:input={()=>{\n\t\tERROR_OF_NAME = error_check_name(NAME) ? error_check_name(NAME) : '';\n\t\tERROR_OF_NAME = ERROR_OF_NAME === 'OK' ? \"\" : error_check_name(NAME);\n\t}}>\n\t{ERROR_OF_NAME}\n\tpassword: <input bind:value={PASSWORD} type=\"password\" placeholder=\"password\" autocomplete=\"current-password\"\n\ton:input={()=>{\n\t\tERROR_OF_PASSWORD = error_check_password(PASSWORD) ? error_check_password(PASSWORD) : '';\n\t\tERROR_OF_PASSWORD = ERROR_OF_PASSWORD === 'OK' ? \"\" : error_check_password(PASSWORD);\n\t}}>\n\t{ERROR_OF_PASSWORD}\n\t</form>\n\t<div>\n\n<!-- DATA1: <textarea bind:value={DATA1} placeholder=\"DATA1\" class=\"link\"></textarea> -->\n<!-- DATA2: <textarea bind:value={DATA2} placeholder=\"DATA2\" class=\"link\"></textarea> -->\n\n<!-- <button on:click={fetch_insert_link} class=\"insert_link\">insert_link</button> -->\n\n\t\t<button on:click={() => fetch_hello({})}>CLEAR</button>\n\t\t<button on:click={() => order_by_and_fetch_hello()}>ORDER_BY: {ORDER_BY}</button>\n\t\t<button on:click={() => order_by_column_and_fetch_hello()}>ORDER_BY_COLUMN: {ORDER_BY_COLUMN}</button>\t\t\n\t</div>\n\t{#each ALL_TAGS as item, index}\n\t<button on:click={() => req_tag_and_fetch_hello(item.tag)}>{item.tag}</button>\n\t{/each}\n\t<ul>\n\t{#each HELLO_FETCH_DATA as item, index}\n\t\t<br>\n\t\t<br>\n\n\t\t<li>\n\t\t\t<div>\n\t\t\t\t{#each item.tags as tags, INDEX}\n\t\t\t\t<button on:click={() => req_tag_and_fetch_hello(tags)}>{tags}</button>\n\t\t\t\t{/each}\n\t\t\t</div>\n\n\t\t\t<div>\n\t<input bind:this={TAG_VAL} list=\"autocomplete_list\" type=\"text\" bind:value={TAG} placeholder=\"tag\"\n\t\ton:input={()=>{\n\t\t\tERROR_OF_TAG = error_check_insert_tag(TAG) !== 'OK' ? error_check_insert_tag(TAG) : '';\n\t\t\tERROR_OF_TAG === '' ? fetch_get_tags_for_autocomplete() : null;\n\t\t}}\n\t>\n\t{ERROR_OF_TAG}\n\t\t\t\t<datalist>\n\t\t\t\t\t{#each ALL_TAGS as item, index}\n\t\t\t\t\t<option value={item.tag}>\n\t\t\t\t\t{/each}\n\t\t\t\t</datalist>\n\t\t\t\t<!-- <button on:click={fetch_insert_tag(item.id)}>fetch_insert_tag</button> -->\n\t\t\t\t<!-- error_check_insert_tag('test!', '記号を含む場合はエラー'); -->\n\t\t\t\t<!-- <button on:click={()=> {check_any() ? console.log(1) : console.log(2)}}>fetch_insert_tag</button> -->\n<button on:click={()=>{\nlet res = error_check_insert_tag(TAG);\n\tres === 'OK' ? fetch_insert_tag(item.id) : console.log(res);\n}}>fetch_insert_tag</button>\n\t\t\t\t<!-- <button on:click={error_check_insert_tag ? fetch_insert_tag(item.id) : null}>fetch_insert_tag</button> -->\n\t\t\t</div>\n\t\t\t<ul>\n\t\t\t<li>\n\t\t\t<!-- data1とdata2を一時的に表示用にJSON.stringifyする -->\n\t\t\t<!-- <span>data1: {JSON.parse(item.data_json_str).data1}</span> -->\n<span>data_json_str: {JSON.stringify(JSON.parse(item.data_json_str))}</span>\n<button on:click={() => init(\n\titem,\n\titem['username'],\n\t)}>init_from_online</button>\n{item.id}\n\t\t\t<!-- <span>data2: {JSON.parse(item.data_json_str).data2}</span> -->\n\t\t\t<!-- <span>data2: {JSON.stringify(JSON.parse(item.data_json_str).data2)}</span> -->\n\t\t\t<button on:click={fetch_delete_link(item.id)}>fetch_delete_link</button>\n\t\t\t<!-- fetch_copy_insert_link 自分自身が所有するlinkの時はボタンを表示しない -->\n\t\t\t{#if item.username !== NAME}\n\t\t\t<button on:click={fetch_copy_insert_link(JSON.parse(item.data_json_str))}>fetch_copy_insert_link</button>\n\t\t\t{/if}\n\n\t\t\t</li>\n\t\t\t</ul>\n\n\t\t\t<!-- <div>created_at: {item.created_at}</div> -->\n\t\t\t<!-- <div>updated_at: {item.updated_at}</div> -->\n\t\t\t<!-- <div>user_id: {item.user_id}</div> -->\n\t\t\t<!-- <div>username: {item.username}</div> -->\n\t\t\t<button on:click={() => user_and_fetch_hello(item.username)}>{item.username}</button>\n\t\t\t<!-- <div>like_count: {item.like_count}</div> -->\n\t\t\t<!-- like_countの数だけ😇が表示される -->\n\t\t\t<!-- {#each Array(item.like_count) as item, index} -->\n\t\t\t{#each item.likes as item, index}\n\t\t\t<span>😇</span>\n\t\t\t{/each}\n\t\t\t<button on:click={fetch_like_increment_or_decrement(item.id)}>like_increment_or_decrement</button>\n\t\t\t<div>\n\t\t\t\t<input type=\"text\" bind:value={COMMENT} placeholder=\"comment\"\n\t\t\t\t\ton:input={()=>{\n\t\t\t\t\t\t// const error_check_insert_comment = (comment, DATA_LIMIT) \n\t\t\t\t\t\tERROR_OF_COMMENT = error_check_insert_comment(COMMENT) !== 'OK' ? error_check_insert_comment(COMMENT) : '';\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t{ERROR_OF_COMMENT}\n\t\t\t<button on:click={fetch_insert_comment(item.id)}>fetch_insert_comment</button>\n\t\t\t</div>\n\t\t\t<ul class=\"comment_zone\">{#each item.comments_and_replies as comments_and_reply, INDEX}\n\t\t\t\t<li>\n\t\t\t\t\t{comments_and_reply[INDEX]['comment']}\n\t\t\t\t\t<button on:click={() => user_and_fetch_hello(comments_and_reply[INDEX]['username'])}>{comments_and_reply[INDEX]['username']}</button>\n\t\t\t\t\t<button on:click={fetch_delete_comment(comments_and_reply[INDEX]['id'])}>fetch_delete_comment</button>\n\t\t\t\t</li>\n\t\t\t\t\t<input bind:value={COMMENT_REPLY} type=\"text\" placeholder=\"comment_reply\"\n\t\t\t\t\t\t\ton:input={()=>{\n\t\t\t\t\t\t\t\tERROR_OF_COMMENT_REPLY = error_check_insert_comment_reply(COMMENT_REPLY) !== 'OK' ? error_check_insert_comment_reply(COMMENT_REPLY) : '';\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t{ERROR_OF_COMMENT_REPLY}\n\t\t\t\t\t<button on:click={fetch_insert_comment_reply(comments_and_reply[INDEX]['id'])}>fetch_insert_comment_reply</button>\n\t\t\t\t<li class=\"reply_zone\">\n\t\t\t\t\t<ul>{#each comments_and_reply['comment_replies'] as comment_reply, INDEX}\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t{comment_reply['reply']}\n\t\t\t\t\t\t\t<button on:click={() => user_and_fetch_hello(comment_reply['username'])}>{comment_reply['username']}</button>\n\t\t\t\t\t\t\t<button on:click={fetch_delete_comment_reply(comment_reply['id'])}>fetch_delete_comment_reply</button>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t{/each}</ul>\n\t\t\t\t</li>\n\t{/each}</ul>\n\t</li>\n\t{/each}\n\t</ul>\n\t</div>\n</aside>\n</main>\n\n<!-- <footer>\n\t<a href=\"https://taroyanaka.github.io/svelte2/\">this site is https://taroyanaka.github.io/svelte2/</a>\n</footer> -->\n\n\n\n\n<style>\n/* headerタグを配置 */\nheader {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  background-color: #333;\n  color: #fff;\n  /* padding: 1rem; */\n  text-align: left;\n  z-index: 1000;\n  /* headerのheghtを指定 */\n  /* height: 20rem; */\n\n\n}\n/* footerタグを配置 */\nmain {\n\tdisplay: flex;\n\t/* mainをheaderの下に配置 */\n\tmargin-top: 15rem;\n}\n.left_side {\n\tflex: 1 0 50%;\n}\n.right_side {\n\tflex: 1 0 50%;\n}\n.hidden {\n    display: none;\n}\n\n\n\n\n\n\n\n\n\t.detail_button{\n\t\tdisplay: inline;\n\t\tfont-size: 0.8rem;\n\t}\n\t.id{\n\t\tfont-size: 2rem;\n\tmax-height: 100%;\n\tmax-width: 100%;\n\tbackground-color: lightgray;\n\t}\n\t.description{\n\t\tfont-size: 2rem;\n\tmax-height: 100%;\n\tmax-width: 100%;\n\tbackground-color: peachpuff;\t\t\n\t}\n\t.each_item {\n\tfont-size: 2rem;\n\tmax-height: 100%;\n\tmax-width: 100%;\n\tbackground-color: gray;\n\t}\n\t.space{\n\theight: 0.5rem;\n\t}\n\tinput[type=\"checkbox\"] {\n\t\twidth: 2rem;\n\t\theight: 2rem;\n\t}\n</style>","// import One from './One.svelte';const one = new One({target: document.body,});export default One;\nimport App from './App.svelte';const app = new App({target: document.body,});export default app;"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","null_to_empty","value","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","document","createElement","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","removeAttribute","getAttribute","setAttribute","set_data","set_input_value","input","set_style","key","important","style","removeProperty","setProperty","current_component","set_current_component","component","get_current_component","Error","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","seen_callbacks","Set","flushidx","flush","saved_component","update","$$","e","pop","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","destroy_component","filtered","targets","c","indexOf","flush_render_callbacks","on_destroy","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_mount","on_disconnect","context","Map","callbacks","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","block","delete","local","customElement","m","new_on_destroy","map","filter","mount_component","SvelteComponent","$destroy","this","$on","type","index","splice","$set","$$props","obj","$$set","keys","div","span","t1_value","id","t3_value","t5_value","Date","check_date","getFullYear","t7_value","getMonth","t9_value","getDate","t11_value","getHours","t13_value","getMinutes","t15_value","getSeconds","t22_value","t25_value","div4","div0","br0","button0","input0","checked","check_on_off","div3","input1","div1","div2","button1","button2","br1","t1","t3","t5","t7","t9","t11","t13","t15","t22","t25","t_value","tag","button","t","option","__value","option_value_value","JSON","parse","data_json_str","apply","arguments","t0_value","t2_value","li","t0","t2","each_value_2","li0","li1","ul","stringify","t14_value","t19_value","username","each_value_5","tags","create_if_block","each_value_3","likes","each_value_1","comments_and_replies","datalist","ul0","button3","button4","button5","ul1","t10","t10_value","t14","t19","if_block0","create_if_block_2","if_block1","create_if_block_1","header","main","aside0","button6","br","button7","button8","button9","aside1","div5","form","button10","button11","button12","ID","DESCRIPTION","LIST","add_date","toISOString","update_date","IS_EDITING_DESCRIPTION","SELECTED_ITEM_ID","all_list_fn","A_OR_D","change_sort","check_date_update","Id_To_Check","$$invalidate","item","sort_by_id","sort","sort_by_text","localeCompare","sort_by_add_date","sort_by_update_date","sort_by_check_date","make_new_blank_list","add_list","Text","Add_Date","Update_Date","Check_Date","remove_list","Id_To_Remove","edit_list","Id_To_Edit","toggle_details","Item_Id","toggle_EDITING_DESCRIPTION","edit_description","fetch_insert_or_update_link","async","pre_upload_for_make_json_str","DATA","desc","list","ERROR_OF_COMMENT_REPLY","ERROR_OF_COMMENT","ERROR_OF_NAME","ERROR_OF_PASSWORD","ERROR_OF_TAG","HELLO_FETCH_DATA","error_check_name","error_check_password","error_check_insert_tag","error_check_insert_comment","error_check_insert_comment_reply","error_check_insert_link","error_check_insert_data","Name","undefined","includes","validate_name_switch","error","message","password","Password","validate_password_switch","reserved_words","some","checkForSpaces","symbol","checkForSymbols","comment","DATA_LIMIT","comment_reply","link","WHITE_LIST_URL_ARRAY","is_url","url","test","console","log","target_url_str","WHITE_LIST_URL","startsWith","RESPONSE","NAME","PASSWORD","TEST_MODE","COMMENT","COMMENT_REPLY","TAG","TAG_VAL","ORDER_BY","ORDER_BY_COLUMN","REQ_TAG","USER","ERROR_MESSAGE","SUCCESS_MESSAGE","ERROR_MESSAGE_STACK","SUCCESS_MESSAGE_STACK","FETCH_TEST_DATA","ALL_TAGS","DOMAIN_NAME","value2","get_POST_object","fetch_hello","fetch_insert_link","fetch_delete_link","fetch_like_increment_or_decrement","fetch_insert_comment","fetch_delete_comment","fetch_insert_comment_reply","fetch_delete_comment_reply","fetch_insert_tag","fetch_copy_insert_link","fetch_get_collect_value_for_test","fetch_get_tags_for_autocomplete","remove_error_message","order_by_column_and_fetch_hello","order_by_and_fetch_hello","req_tag_and_fetch_hello","user_and_fetch_hello","BODY_OBJ","method","headers","body","ORDER_BY_PARAM","ORDER_BY_COLUMN_PARAM","REQ_TAG_PARAM","USER_PARAM","make_get_param","get_param_array","join","res","fetch","json","result","pre_result","response_handling","status","DATA_JSON_STR","Link_id","link_id","LINK_ID","comment_id","COMMENT_ID","Comment_id","comment_reply_id","Comment_reply_id","TAG_PARAM","RESULT_OF_TEST","USER_VAL","all_fetch_fn","afterUpdate","User_Name","Id","Data_Json_Str","pre_download_for_parse_json_str","$$value","comments_and_reply","INDEX"],"mappings":"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","x_google_ignoreList":[0]}